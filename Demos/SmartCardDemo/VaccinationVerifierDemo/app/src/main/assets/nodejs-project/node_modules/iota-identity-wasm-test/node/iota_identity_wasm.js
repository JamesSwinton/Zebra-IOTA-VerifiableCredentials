const fetch = require('node-fetch')
global.Headers = fetch.Headers
global.Request = fetch.Request
global.Response = fetch.Response
global.fetch = fetch

let imports = {};
imports['__wbindgen_placeholder__'] = module.exports;
let wasm;
const { TextDecoder, inspect } = require(String.raw`util`);

let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true });

cachedTextDecoder.decode();

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function getObject(idx) { return heap[idx]; }

let WASM_VECTOR_LEN = 0;

let cachegetNodeBufferMemory0 = null;
function getNodeBufferMemory0() {
    if (cachegetNodeBufferMemory0 === null || cachegetNodeBufferMemory0.buffer !== wasm.memory.buffer) {
        cachegetNodeBufferMemory0 = Buffer.from(wasm.memory.buffer);
    }
    return cachegetNodeBufferMemory0;
}

function passStringToWasm0(arg, malloc) {

    const len = Buffer.byteLength(arg);
    const ptr = malloc(len);
    getNodeBufferMemory0().write(arg, ptr, len);
    WASM_VECTOR_LEN = len;
    return ptr;
}

let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

function isLikeNone(x) {
    return x === undefined || x === null;
}

let cachegetFloat64Memory0 = null;
function getFloat64Memory0() {
    if (cachegetFloat64Memory0 === null || cachegetFloat64Memory0.buffer !== wasm.memory.buffer) {
        cachegetFloat64Memory0 = new Float64Array(wasm.memory.buffer);
    }
    return cachegetFloat64Memory0;
}

function debugString(val) {
    // primitive types
    const type = typeof val;
    if (type == 'number' || type == 'boolean' || val == null) {
        return  `${val}`;
    }
    if (type == 'string') {
        return `"${val}"`;
    }
    if (type == 'symbol') {
        const description = val.description;
        if (description == null) {
            return 'Symbol';
        } else {
            return `Symbol(${description})`;
        }
    }
    if (type == 'function') {
        const name = val.name;
        if (typeof name == 'string' && name.length > 0) {
            return `Function(${name})`;
        } else {
            return 'Function';
        }
    }
    // objects
    if (Array.isArray(val)) {
        const length = val.length;
        let debug = '[';
        if (length > 0) {
            debug += debugString(val[0]);
        }
        for(let i = 1; i < length; i++) {
            debug += ', ' + debugString(val[i]);
        }
        debug += ']';
        return debug;
    }
    // Test for built-in
    const builtInMatches = /\[object ([^\]]+)\]/.exec(toString.call(val));
    let className;
    if (builtInMatches.length > 1) {
        className = builtInMatches[1];
    } else {
        // Failed to match the standard '[object ClassName]'
        return toString.call(val);
    }
    if (className == 'Object') {
        // we're a user defined class or Object
        // JSON.stringify avoids problems with cycles, and is generally much
        // easier than looping through ownProperties of `val`.
        try {
            return 'Object(' + JSON.stringify(val) + ')';
        } catch (_) {
            return 'Object';
        }
    }
    // errors
    if (val instanceof Error) {
        return `${val.name}: ${val.message}\n${val.stack}`;
    }
    // TODO we could test for more things here, like `Set`s and `Map`s.
    return className;
}

function makeMutClosure(arg0, arg1, dtor, f) {
    const state = { a: arg0, b: arg1, cnt: 1, dtor };
    const real = (...args) => {
        // First up with a closure we increment the internal reference
        // count. This ensures that the Rust closure environment won't
        // be deallocated while we're invoking it.
        state.cnt++;
        const a = state.a;
        state.a = 0;
        try {
            return f(a, state.b, ...args);
        } finally {
            if (--state.cnt === 0) {
                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);

            } else {
                state.a = a;
            }
        }
    };
    real.original = state;

    return real;
}
function __wbg_adapter_32(arg0, arg1, arg2) {
    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h3ac5b583b0bf3a8f(arg0, arg1, addHeapObject(arg2));
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}

let stack_pointer = 32;

function addBorrowedObject(obj) {
    if (stack_pointer == 1) throw new Error('out of js stack');
    heap[--stack_pointer] = obj;
    return stack_pointer;
}
/**
* Publishes a DID Document to the Tangle, params looks like { node: "http://localhost:14265", network: "main" }
* @param {any} doc
* @param {any} params
* @returns {any}
*/
module.exports.publish = function(doc, params) {
    var ret = wasm.publish(addHeapObject(doc), addHeapObject(params));
    return takeObject(ret);
};

/**
* Resolves the latest DID Document from the Tangle, params looks like { node: "http://localhost:14265", network: "main" }
* @param {string} did
* @param {any} params
* @returns {any}
*/
module.exports.resolve = function(did, params) {
    var ptr0 = passStringToWasm0(did, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.resolve(ptr0, len0, addHeapObject(params));
    return takeObject(ret);
};

/**
* Validates credential with the DID Document from the Tangle, params looks like { node: "http://localhost:14265", network: "main" }
* @param {string} data
* @param {any} params
* @returns {any}
*/
module.exports.checkCredential = function(data, params) {
    var ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.checkCredential(ptr0, len0, addHeapObject(params));
    return takeObject(ret);
};

/**
* Validates credential with the DID Document from the Tangle, params looks like { node: "http://localhost:14265", network: "main" }
* @param {string} data
* @param {any} params
* @returns {any}
*/
module.exports.checkPresentation = function(data, params) {
    var ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    var ret = wasm.checkPresentation(ptr0, len0, addHeapObject(params));
    return takeObject(ret);
};

/**
*/
module.exports.start = function() {
    wasm.start();
};

/**
* Initializes the console_error_panic_hook for better error messages
* @returns {any}
*/
module.exports.initialize = function() {
    var ret = wasm.initialize();
    return takeObject(ret);
};

function handleError(f) {
    return function () {
        try {
            return f.apply(this, arguments);

        } catch (e) {
            wasm.__wbindgen_exn_store(addHeapObject(e));
        }
    };
}

function getArrayU8FromWasm0(ptr, len) {
    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
}
function __wbg_adapter_174(arg0, arg1, arg2, arg3) {
    wasm.wasm_bindgen__convert__closures__invoke2_mut__h58f39d7e933aee21(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));
}

/**
*/
class DID {

    static __wrap(ptr) {
        const obj = Object.create(DID.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            network: this.network,
            shard: this.shard,
            tag: this.tag,
            address: this.address,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_did_free(ptr);
    }
    /**
    * Creates a new `DID` from a `Key` object.
    * @param {Key} key
    * @param {string | undefined} network
    */
    constructor(key, network) {
        _assertClass(key, Key);
        var ptr0 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.did_new(key.ptr, ptr0, len0);
        return DID.__wrap(ret);
    }
    /**
    * Creates a new `DID` from a base58-encoded public key.
    * @param {string} key
    * @param {string | undefined} network
    * @returns {DID}
    */
    static fromBase58Key(key, network) {
        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.did_fromBase58Key(ptr0, len0, ptr1, len1);
        return DID.__wrap(ret);
    }
    /**
    * Creates a new `DID` from a base64-encoded public key.
    * @param {string} key
    * @param {string | undefined} network
    * @returns {DID}
    */
    static fromBase64Key(key, network) {
        var ptr0 = passStringToWasm0(key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.did_fromBase64Key(ptr0, len0, ptr1, len1);
        return DID.__wrap(ret);
    }
    /**
    * Parses a `DID` from the input string.
    * @param {string} input
    * @returns {DID}
    */
    static parse(input) {
        var ptr0 = passStringToWasm0(input, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.did_parse(ptr0, len0);
        return DID.__wrap(ret);
    }
    /**
    * Returns the IOTA tangle network of the `DID`.
    * @returns {string}
    */
    get network() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.did_network(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the IOTA tangle shard of the `DID` (if any).
    * @returns {string | undefined}
    */
    get shard() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.did_shard(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            let v0;
            if (r0 !== 0) {
                v0 = getStringFromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
            }
            return v0;
        } finally {
            wasm.__wbindgen_export_4.value += 16;
        }
    }
    /**
    * Returns the unique tag of the `DID`.
    * @returns {string}
    */
    get tag() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.did_tag(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the IOTA tangle address of the `DID`.
    * @returns {string}
    */
    get address() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.did_address(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the `DID` object as a string.
    * @returns {string}
    */
    toString() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.did_toString(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
}
module.exports.DID = DID;
/**
*/
class Doc {

    static __wrap(ptr) {
        const obj = Object.create(Doc.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            did: this.did,
            id: this.id,
            authChain: this.authChain,
            diffChain: this.diffChain,
            proof: this.proof,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_doc_free(ptr);
    }
    /**
    * @param {PubKey} authentication
    */
    constructor(authentication) {
        _assertClass(authentication, PubKey);
        var ret = wasm.doc_new(authentication.ptr);
        return Doc.__wrap(ret);
    }
    /**
    * Generates a keypair and DID Document, supported key_type is "Ed25519VerificationKey2018"
    * @param {string} key_type
    * @param {string | undefined} network
    * @param {string | undefined} tag
    * @returns {NewDoc}
    */
    static generateRandom(key_type, network, tag) {
        var ptr0 = passStringToWasm0(key_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = isLikeNone(tag) ? 0 : passStringToWasm0(tag, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.doc_generateRandom(ptr0, len0, ptr1, len1, ptr2, len2);
        return NewDoc.__wrap(ret);
    }
    /**
    * Generates an Ed25519 keypair and DID Document
    * @param {string | undefined} network
    * @param {string | undefined} tag
    * @returns {NewDoc}
    */
    static generateEd25519(network, tag) {
        var ptr0 = isLikeNone(network) ? 0 : passStringToWasm0(network, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(tag) ? 0 : passStringToWasm0(tag, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.doc_generateEd25519(ptr0, len0, ptr1, len1);
        return NewDoc.__wrap(ret);
    }
    /**
    * @returns {DID}
    */
    get did() {
        var ret = wasm.doc_did(this.ptr);
        return DID.__wrap(ret);
    }
    /**
    * @returns {string}
    */
    get id() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.doc_id(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * @returns {string}
    */
    get authChain() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.doc_authChain(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * @returns {string}
    */
    get diffChain() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.doc_diffChain(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * @returns {any}
    */
    get proof() {
        var ret = wasm.doc_proof(this.ptr);
        return takeObject(ret);
    }
    /**
    * @param {Key} key
    * @returns {any}
    */
    sign(key) {
        _assertClass(key, Key);
        var ret = wasm.doc_sign(this.ptr, key.ptr);
        return takeObject(ret);
    }
    /**
    * Verify the signature with the authentication_key
    * @returns {boolean}
    */
    verify() {
        var ret = wasm.doc_verify(this.ptr);
        return ret !== 0;
    }
    /**
    * Generate the difference between two DID Documents and sign it
    * @param {Doc} other
    * @param {Key} key
    * @returns {any}
    */
    diff(other, key) {
        _assertClass(other, Doc);
        _assertClass(key, Key);
        var ret = wasm.doc_diff(this.ptr, other.ptr, key.ptr);
        return takeObject(ret);
    }
    /**
    * Verify the signature in a diff with the authentication_key
    * @param {string} diff
    * @returns {boolean}
    */
    verifyDiff(diff) {
        var ptr0 = passStringToWasm0(diff, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.doc_verifyDiff(this.ptr, ptr0, len0);
        return ret !== 0;
    }
    /**
    * @param {DID} did
    * @param {string} url
    * @param {string} service_type
    */
    updateService(did, url, service_type) {
        _assertClass(did, DID);
        var ptr0 = did.ptr;
        did.ptr = 0;
        var ptr1 = passStringToWasm0(url, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = passStringToWasm0(service_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        wasm.doc_updateService(this.ptr, ptr0, ptr1, len1, ptr2, len2);
    }
    /**
    */
    clearServices() {
        wasm.doc_clearServices(this.ptr);
    }
    /**
    * @param {PubKey} public_key
    */
    updatePublicKey(public_key) {
        _assertClass(public_key, PubKey);
        wasm.doc_updatePublicKey(this.ptr, public_key.ptr);
    }
    /**
    */
    clearPublicKeys() {
        wasm.doc_clearPublicKeys(this.ptr);
    }
    /**
    * @param {PubKey} public_key
    */
    updateAuth(public_key) {
        _assertClass(public_key, PubKey);
        wasm.doc_updateAuth(this.ptr, public_key.ptr);
    }
    /**
    */
    clearAuth() {
        wasm.doc_clearAuth(this.ptr);
    }
    /**
    * @param {PubKey} public_key
    */
    updateAssert(public_key) {
        _assertClass(public_key, PubKey);
        wasm.doc_updateAssert(this.ptr, public_key.ptr);
    }
    /**
    */
    clearAssert() {
        wasm.doc_clearAssert(this.ptr);
    }
    /**
    * @param {PubKey} public_key
    */
    updateVerification(public_key) {
        _assertClass(public_key, PubKey);
        wasm.doc_updateVerification(this.ptr, public_key.ptr);
    }
    /**
    */
    clearVerification() {
        wasm.doc_clearVerification(this.ptr);
    }
    /**
    * @param {PubKey} public_key
    */
    updateDelegation(public_key) {
        _assertClass(public_key, PubKey);
        wasm.doc_updateDelegation(this.ptr, public_key.ptr);
    }
    /**
    */
    clearDelegation() {
        wasm.doc_clearDelegation(this.ptr);
    }
    /**
    * @param {PubKey} public_key
    */
    updateInvocation(public_key) {
        _assertClass(public_key, PubKey);
        wasm.doc_updateInvocation(this.ptr, public_key.ptr);
    }
    /**
    */
    clearInvocation() {
        wasm.doc_clearInvocation(this.ptr);
    }
    /**
    * @param {PubKey} public_key
    */
    updateAgreement(public_key) {
        _assertClass(public_key, PubKey);
        wasm.doc_updateAgreement(this.ptr, public_key.ptr);
    }
    /**
    */
    clearAgreement() {
        wasm.doc_clearAgreement(this.ptr);
    }
    /**
    */
    updateTime() {
        wasm.doc_updateTime(this.ptr);
    }
    /**
    * @param {any} ident
    * @param {string | undefined} scope
    * @returns {PubKey}
    */
    resolveKey(ident, scope) {
        var ptr0 = isLikeNone(scope) ? 0 : passStringToWasm0(scope, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.doc_resolveKey(this.ptr, addHeapObject(ident), ptr0, len0);
        return PubKey.__wrap(ret);
    }
    /**
    * Serializes a `Doc` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.doc_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `Doc` object from a JSON object.
    * @param {any} json
    * @returns {Doc}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.doc_fromJSON(addBorrowedObject(json));
            return Doc.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
module.exports.Doc = Doc;
/**
*/
class Key {

    static __wrap(ptr) {
        const obj = Object.create(Key.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            public: this.public,
            private: this.private,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_key_free(ptr);
    }
    /**
    * Generates a new `Key` object.
    * @param {string} key_type
    */
    constructor(key_type) {
        var ptr0 = passStringToWasm0(key_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ret = wasm.key_new(ptr0, len0);
        return Key.__wrap(ret);
    }
    /**
    * Generates a new `Key` object suitable for ed25519 signatures.
    * @returns {Key}
    */
    static generateEd25519() {
        var ret = wasm.key_generateEd25519();
        return Key.__wrap(ret);
    }
    /**
    * Parses a `Key` object from base58-encoded public/private keys.
    * @param {string} public_key
    * @param {string} private_key
    * @returns {Key}
    */
    static fromBase58(public_key, private_key) {
        var ptr0 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.key_fromBase58(ptr0, len0, ptr1, len1);
        return Key.__wrap(ret);
    }
    /**
    * Parses a `Key` object from base64-encoded public/private keys.
    * @param {string} public_key
    * @param {string} private_key
    * @returns {Key}
    */
    static fromBase64(public_key, private_key) {
        var ptr0 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(private_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.key_fromBase64(ptr0, len0, ptr1, len1);
        return Key.__wrap(ret);
    }
    /**
    * Returns the public key as a base58-encoded string.
    * @returns {string}
    */
    get public() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.key_public(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Returns the private key as a base58-encoded string.
    * @returns {string}
    */
    get private() {
        try {
            const retptr = wasm.__wbindgen_export_4.value - 16;
            wasm.__wbindgen_export_4.value = retptr;
            wasm.key_private(retptr, this.ptr);
            var r0 = getInt32Memory0()[retptr / 4 + 0];
            var r1 = getInt32Memory0()[retptr / 4 + 1];
            return getStringFromWasm0(r0, r1);
        } finally {
            wasm.__wbindgen_export_4.value += 16;
            wasm.__wbindgen_free(r0, r1);
        }
    }
    /**
    * Serializes a `Key` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.key_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `Key` object from a JSON object.
    * @param {any} json
    * @returns {Key}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.key_fromJSON(addBorrowedObject(json));
            return Key.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
module.exports.Key = Key;
/**
*/
class NewDoc {

    static __wrap(ptr) {
        const obj = Object.create(NewDoc.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            key: this.key,
            doc: this.doc,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_newdoc_free(ptr);
    }
    /**
    * @returns {Key}
    */
    get key() {
        var ret = wasm.newdoc_key(this.ptr);
        return Key.__wrap(ret);
    }
    /**
    * @returns {Doc}
    */
    get doc() {
        var ret = wasm.newdoc_doc(this.ptr);
        return Doc.__wrap(ret);
    }
}
module.exports.NewDoc = NewDoc;
/**
*/
class PubKey {

    static __wrap(ptr) {
        const obj = Object.create(PubKey.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
            id: this.id,
            controller: this.controller,
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_pubkey_free(ptr);
    }
    /**
    * @param {DID} did
    * @param {string} key_type
    * @param {string} key_data
    * @param {string | undefined} tag
    */
    constructor(did, key_type, key_data, tag) {
        _assertClass(did, DID);
        var ptr0 = passStringToWasm0(key_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = passStringToWasm0(key_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ptr2 = isLikeNone(tag) ? 0 : passStringToWasm0(tag, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len2 = WASM_VECTOR_LEN;
        var ret = wasm.pubkey_new(did.ptr, ptr0, len0, ptr1, len1, ptr2, len2);
        return PubKey.__wrap(ret);
    }
    /**
    * Generates a new `PubKey` object suitable for ed25519 signatures.
    * @param {DID} did
    * @param {string} key_data
    * @param {string | undefined} tag
    * @returns {PubKey}
    */
    static generateEd25519(did, key_data, tag) {
        _assertClass(did, DID);
        var ptr0 = passStringToWasm0(key_data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(tag) ? 0 : passStringToWasm0(tag, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.pubkey_generateEd25519(did.ptr, ptr0, len0, ptr1, len1);
        return PubKey.__wrap(ret);
    }
    /**
    * Returns the `id` DID of the `PubKey` object.
    * @returns {DID}
    */
    get id() {
        var ret = wasm.pubkey_id(this.ptr);
        return DID.__wrap(ret);
    }
    /**
    * Returns the `controller` DID of the `PubKey` object.
    * @returns {DID}
    */
    get controller() {
        var ret = wasm.pubkey_controller(this.ptr);
        return DID.__wrap(ret);
    }
    /**
    * Serializes a `PubKey` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.pubkey_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `PubKey` object from a JSON object.
    * @param {any} json
    * @returns {PubKey}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.pubkey_fromJSON(addBorrowedObject(json));
            return PubKey.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
module.exports.PubKey = PubKey;
/**
*/
class VerifiableCredential {

    static __wrap(ptr) {
        const obj = Object.create(VerifiableCredential.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_verifiablecredential_free(ptr);
    }
    /**
    * @param {Doc} issuer_doc
    * @param {Key} issuer_key
    * @param {any} subject_data
    * @param {string | undefined} credential_type
    * @param {string | undefined} credential_id
    */
    constructor(issuer_doc, issuer_key, subject_data, credential_type, credential_id) {
        _assertClass(issuer_doc, Doc);
        _assertClass(issuer_key, Key);
        var ptr0 = isLikeNone(credential_type) ? 0 : passStringToWasm0(credential_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(credential_id) ? 0 : passStringToWasm0(credential_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.verifiablecredential_new(issuer_doc.ptr, issuer_key.ptr, addHeapObject(subject_data), ptr0, len0, ptr1, len1);
        return VerifiableCredential.__wrap(ret);
    }
    /**
    * Signs the credential with the given issuer `Doc` and `Key` object.
    * @param {Doc} issuer
    * @param {Key} key
    */
    sign(issuer, key) {
        _assertClass(issuer, Doc);
        _assertClass(key, Key);
        wasm.verifiablecredential_sign(this.ptr, issuer.ptr, key.ptr);
    }
    /**
    * Verifies the credential signature against the issuer `Doc`.
    * @param {Doc} issuer
    * @returns {boolean}
    */
    verify(issuer) {
        _assertClass(issuer, Doc);
        var ret = wasm.verifiablecredential_verify(this.ptr, issuer.ptr);
        return ret !== 0;
    }
    /**
    * Serializes a `VerifiableCredential` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.verifiablecredential_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `VerifiableCredential` object from a JSON object.
    * @param {any} json
    * @returns {VerifiableCredential}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.verifiablecredential_fromJSON(addBorrowedObject(json));
            return VerifiableCredential.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
module.exports.VerifiableCredential = VerifiableCredential;
/**
*/
class VerifiablePresentation {

    static __wrap(ptr) {
        const obj = Object.create(VerifiablePresentation.prototype);
        obj.ptr = ptr;

        return obj;
    }

    toJSON() {
        return {
        };
    }

    toString() {
        return JSON.stringify(this);
    }

    [inspect.custom]() {
        return Object.assign(Object.create({constructor: this.constructor}), this.toJSON());
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_verifiablepresentation_free(ptr);
    }
    /**
    * @param {Doc} holder_doc
    * @param {Key} holder_key
    * @param {any} credential_data
    * @param {string | undefined} presentation_type
    * @param {string | undefined} presentation_id
    */
    constructor(holder_doc, holder_key, credential_data, presentation_type, presentation_id) {
        _assertClass(holder_doc, Doc);
        _assertClass(holder_key, Key);
        var ptr0 = isLikeNone(presentation_type) ? 0 : passStringToWasm0(presentation_type, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len0 = WASM_VECTOR_LEN;
        var ptr1 = isLikeNone(presentation_id) ? 0 : passStringToWasm0(presentation_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
        var len1 = WASM_VECTOR_LEN;
        var ret = wasm.verifiablepresentation_new(holder_doc.ptr, holder_key.ptr, addHeapObject(credential_data), ptr0, len0, ptr1, len1);
        return VerifiablePresentation.__wrap(ret);
    }
    /**
    * Signs the credential with the given holder `Doc` and `Key` object.
    * @param {Doc} holder
    * @param {Key} key
    */
    sign(holder, key) {
        _assertClass(holder, Doc);
        _assertClass(key, Key);
        wasm.verifiablepresentation_sign(this.ptr, holder.ptr, key.ptr);
    }
    /**
    * Verifies the credential signature against the holder `Doc`.
    * @param {Doc} holder
    * @returns {boolean}
    */
    verify(holder) {
        _assertClass(holder, Doc);
        var ret = wasm.verifiablepresentation_verify(this.ptr, holder.ptr);
        return ret !== 0;
    }
    /**
    * Serializes a `VerifiablePresentation` object as a JSON object.
    * @returns {any}
    */
    toJSON() {
        var ret = wasm.verifiablepresentation_toJSON(this.ptr);
        return takeObject(ret);
    }
    /**
    * Deserializes a `VerifiablePresentation` object from a JSON object.
    * @param {any} json
    * @returns {VerifiablePresentation}
    */
    static fromJSON(json) {
        try {
            var ret = wasm.verifiablepresentation_fromJSON(addBorrowedObject(json));
            return VerifiablePresentation.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
module.exports.VerifiablePresentation = VerifiablePresentation;

module.exports.__wbindgen_json_parse = function(arg0, arg1) {
    var ret = JSON.parse(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

module.exports.__wbindgen_json_serialize = function(arg0, arg1) {
    const obj = getObject(arg1);
    var ret = JSON.stringify(obj === undefined ? null : obj);
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

module.exports.__wbindgen_string_new = function(arg0, arg1) {
    var ret = getStringFromWasm0(arg0, arg1);
    return addHeapObject(ret);
};

module.exports.__wbindgen_object_drop_ref = function(arg0) {
    takeObject(arg0);
};

module.exports.__wbindgen_cb_drop = function(arg0) {
    const obj = takeObject(arg0).original;
    if (obj.cnt-- == 1) {
        obj.a = 0;
        return true;
    }
    var ret = false;
    return ret;
};

module.exports.__wbindgen_is_object = function(arg0) {
    const val = getObject(arg0);
    var ret = typeof(val) === 'object' && val !== null;
    return ret;
};

module.exports.__wbg_new_59cb74e423758ede = function() {
    var ret = new Error();
    return addHeapObject(ret);
};

module.exports.__wbg_stack_558ba5917b466edd = function(arg0, arg1) {
    var ret = getObject(arg1).stack;
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

module.exports.__wbg_error_4bb6c2a97407129a = function(arg0, arg1) {
    try {
        console.error(getStringFromWasm0(arg0, arg1));
    } finally {
        wasm.__wbindgen_free(arg0, arg1);
    }
};

module.exports.__wbindgen_object_clone_ref = function(arg0) {
    var ret = getObject(arg0);
    return addHeapObject(ret);
};

module.exports.__wbg_fetch_f5b2195afedb6a6b = function(arg0) {
    var ret = fetch(getObject(arg0));
    return addHeapObject(ret);
};

module.exports.__wbg_newwithu8arraysequenceandoptions_ae6479c676bebdcf = handleError(function(arg0, arg1) {
    var ret = new Blob(getObject(arg0), getObject(arg1));
    return addHeapObject(ret);
});

module.exports.__wbg_instanceof_Response_328c03967a8e8902 = function(arg0) {
    var ret = getObject(arg0) instanceof Response;
    return ret;
};

module.exports.__wbg_url_67bbdafba8ff6e85 = function(arg0, arg1) {
    var ret = getObject(arg1).url;
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

module.exports.__wbg_status_eb6dbb31556c329f = function(arg0) {
    var ret = getObject(arg0).status;
    return ret;
};

module.exports.__wbg_headers_c736e1fe38752cff = function(arg0) {
    var ret = getObject(arg0).headers;
    return addHeapObject(ret);
};

module.exports.__wbg_arrayBuffer_dc33ab7b8cdf0d63 = handleError(function(arg0) {
    var ret = getObject(arg0).arrayBuffer();
    return addHeapObject(ret);
});

module.exports.__wbg_newwithstrandinit_d1de1bfcd175e38a = handleError(function(arg0, arg1, arg2) {
    var ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));
    return addHeapObject(ret);
});

module.exports.__wbg_new_43d9cb1835f877ad = handleError(function() {
    var ret = new FormData();
    return addHeapObject(ret);
});

module.exports.__wbg_append_f76809690e4b2f3a = handleError(function(arg0, arg1, arg2, arg3) {
    getObject(arg0).append(getStringFromWasm0(arg1, arg2), getObject(arg3));
});

module.exports.__wbg_append_eaa42b75460769af = handleError(function(arg0, arg1, arg2, arg3, arg4, arg5) {
    getObject(arg0).append(getStringFromWasm0(arg1, arg2), getObject(arg3), getStringFromWasm0(arg4, arg5));
});

module.exports.__wbg_new_8469604d5504c189 = handleError(function() {
    var ret = new Headers();
    return addHeapObject(ret);
});

module.exports.__wbg_append_cc6fe0273163a31b = handleError(function(arg0, arg1, arg2, arg3, arg4) {
    getObject(arg0).append(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));
});

module.exports.__wbg_getRandomValues_3ac1b33c90b52596 = function(arg0, arg1, arg2) {
    getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));
};

module.exports.__wbg_randomFillSync_6f956029658662ec = function(arg0, arg1, arg2) {
    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));
};

module.exports.__wbg_self_1c83eb4471d9eb9b = handleError(function() {
    var ret = self.self;
    return addHeapObject(ret);
});

module.exports.__wbg_static_accessor_MODULE_abf5ae284bffdf45 = function() {
    var ret = module;
    return addHeapObject(ret);
};

module.exports.__wbg_require_5b2b5b594d809d9f = function(arg0, arg1, arg2) {
    var ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));
    return addHeapObject(ret);
};

module.exports.__wbg_crypto_c12f14e810edcaa2 = function(arg0) {
    var ret = getObject(arg0).crypto;
    return addHeapObject(ret);
};

module.exports.__wbg_msCrypto_679be765111ba775 = function(arg0) {
    var ret = getObject(arg0).msCrypto;
    return addHeapObject(ret);
};

module.exports.__wbindgen_is_undefined = function(arg0) {
    var ret = getObject(arg0) === undefined;
    return ret;
};

module.exports.__wbg_getRandomValues_05a60bf171bfc2be = function(arg0) {
    var ret = getObject(arg0).getRandomValues;
    return addHeapObject(ret);
};

module.exports.__wbindgen_is_function = function(arg0) {
    var ret = typeof(getObject(arg0)) === 'function';
    return ret;
};

module.exports.__wbg_next_edda7e0003e5daf9 = function(arg0) {
    var ret = getObject(arg0).next;
    return addHeapObject(ret);
};

module.exports.__wbg_next_2966fa909601a075 = handleError(function(arg0) {
    var ret = getObject(arg0).next();
    return addHeapObject(ret);
});

module.exports.__wbg_done_037d0a173aef1834 = function(arg0) {
    var ret = getObject(arg0).done;
    return ret;
};

module.exports.__wbg_value_e60bbfb7d52af62f = function(arg0) {
    var ret = getObject(arg0).value;
    return addHeapObject(ret);
};

module.exports.__wbg_iterator_09191f8878ea9877 = function() {
    var ret = Symbol.iterator;
    return addHeapObject(ret);
};

module.exports.__wbg_get_0e3f2950cdf758ae = handleError(function(arg0, arg1) {
    var ret = Reflect.get(getObject(arg0), getObject(arg1));
    return addHeapObject(ret);
});

module.exports.__wbg_call_8e95613cc6524977 = handleError(function(arg0, arg1) {
    var ret = getObject(arg0).call(getObject(arg1));
    return addHeapObject(ret);
});

module.exports.__wbg_call_d713ea0274dfc6d2 = handleError(function(arg0, arg1, arg2) {
    var ret = getObject(arg0).call(getObject(arg1), getObject(arg2));
    return addHeapObject(ret);
});

module.exports.__wbg_getTime_29addd71c7089c47 = function(arg0) {
    var ret = getObject(arg0).getTime();
    return ret;
};

module.exports.__wbg_new0_a3af66503e735141 = function() {
    var ret = new Date();
    return addHeapObject(ret);
};

module.exports.__wbg_new_3e06d4f36713e4cb = function() {
    var ret = new Object();
    return addHeapObject(ret);
};

module.exports.__wbg_new_d0c63652ab4d825c = function(arg0, arg1) {
    try {
        var state0 = {a: arg0, b: arg1};
        var cb0 = (arg0, arg1) => {
            const a = state0.a;
            state0.a = 0;
            try {
                return __wbg_adapter_174(a, state0.b, arg0, arg1);
            } finally {
                state0.a = a;
            }
        };
        var ret = new Promise(cb0);
        return addHeapObject(ret);
    } finally {
        state0.a = state0.b = 0;
    }
};

module.exports.__wbg_resolve_2529512c3bb73938 = function(arg0) {
    var ret = Promise.resolve(getObject(arg0));
    return addHeapObject(ret);
};

module.exports.__wbg_then_4a7a614abbbe6d81 = function(arg0, arg1) {
    var ret = getObject(arg0).then(getObject(arg1));
    return addHeapObject(ret);
};

module.exports.__wbg_then_3b7ac098cfda2fa5 = function(arg0, arg1, arg2) {
    var ret = getObject(arg0).then(getObject(arg1), getObject(arg2));
    return addHeapObject(ret);
};

module.exports.__wbg_buffer_49131c283a06686f = function(arg0) {
    var ret = getObject(arg0).buffer;
    return addHeapObject(ret);
};

module.exports.__wbg_newwithbyteoffsetandlength_c0f38401daad5a22 = function(arg0, arg1, arg2) {
    var ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
    return addHeapObject(ret);
};

module.exports.__wbg_length_2b13641a9d906653 = function(arg0) {
    var ret = getObject(arg0).length;
    return ret;
};

module.exports.__wbg_new_9b295d24cf1d706f = function(arg0) {
    var ret = new Uint8Array(getObject(arg0));
    return addHeapObject(ret);
};

module.exports.__wbg_set_3bb960a9975f3cd2 = function(arg0, arg1, arg2) {
    getObject(arg0).set(getObject(arg1), arg2 >>> 0);
};

module.exports.__wbg_set_304f2ec1a3ab3b79 = handleError(function(arg0, arg1, arg2) {
    var ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));
    return ret;
});

module.exports.__wbindgen_number_get = function(arg0, arg1) {
    const obj = getObject(arg1);
    var ret = typeof(obj) === 'number' ? obj : undefined;
    getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;
    getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);
};

module.exports.__wbindgen_string_get = function(arg0, arg1) {
    const obj = getObject(arg1);
    var ret = typeof(obj) === 'string' ? obj : undefined;
    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

module.exports.__wbindgen_debug_string = function(arg0, arg1) {
    var ret = debugString(getObject(arg1));
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

module.exports.__wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

module.exports.__wbindgen_rethrow = function(arg0) {
    throw takeObject(arg0);
};

module.exports.__wbindgen_memory = function() {
    var ret = wasm.memory;
    return addHeapObject(ret);
};

module.exports.__wbindgen_closure_wrapper2270 = function(arg0, arg1, arg2) {
    var ret = makeMutClosure(arg0, arg1, 462, __wbg_adapter_32);
    return addHeapObject(ret);
};

const path = require('path').join(__dirname, 'iota_identity_wasm_bg.wasm');
const bytes = require('fs').readFileSync(path);

const wasmModule = new WebAssembly.Module(bytes);
const wasmInstance = new WebAssembly.Instance(wasmModule, imports);
wasm = wasmInstance.exports;
module.exports.__wasm = wasm;

wasm.__wbindgen_start();

