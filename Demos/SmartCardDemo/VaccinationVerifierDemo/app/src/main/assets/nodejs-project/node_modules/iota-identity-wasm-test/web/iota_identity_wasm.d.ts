/* tslint:disable */
/* eslint-disable */
/**
* Publishes a DID Document to the Tangle, params looks like { node: "http://localhost:14265", network: "main" }
* @param {any} doc
* @param {any} params
* @returns {any}
*/
export function publish(doc: any, params: any): any;
/**
* Resolves the latest DID Document from the Tangle, params looks like { node: "http://localhost:14265", network: "main" }
* @param {string} did
* @param {any} params
* @returns {any}
*/
export function resolve(did: string, params: any): any;
/**
* Validates credential with the DID Document from the Tangle, params looks like { node: "http://localhost:14265", network: "main" }
* @param {string} data
* @param {any} params
* @returns {any}
*/
export function checkCredential(data: string, params: any): any;
/**
* Validates credential with the DID Document from the Tangle, params looks like { node: "http://localhost:14265", network: "main" }
* @param {string} data
* @param {any} params
* @returns {any}
*/
export function checkPresentation(data: string, params: any): any;
/**
*/
export function start(): void;
/**
* Initializes the console_error_panic_hook for better error messages
* @returns {any}
*/
export function initialize(): any;
/**
*/
export class DID {
  free(): void;
/**
* Creates a new `DID` from a `Key` object.
* @param {Key} key
* @param {string | undefined} network
*/
  constructor(key: Key, network?: string);
/**
* Creates a new `DID` from a base58-encoded public key.
* @param {string} key
* @param {string | undefined} network
* @returns {DID}
*/
  static fromBase58Key(key: string, network?: string): DID;
/**
* Creates a new `DID` from a base64-encoded public key.
* @param {string} key
* @param {string | undefined} network
* @returns {DID}
*/
  static fromBase64Key(key: string, network?: string): DID;
/**
* Parses a `DID` from the input string.
* @param {string} input
* @returns {DID}
*/
  static parse(input: string): DID;
/**
* Returns the `DID` object as a string.
* @returns {string}
*/
  toString(): string;
/**
* Returns the IOTA tangle address of the `DID`.
* @returns {string}
*/
  readonly address: string;
/**
* Returns the IOTA tangle network of the `DID`.
* @returns {string}
*/
  readonly network: string;
/**
* Returns the IOTA tangle shard of the `DID` (if any).
* @returns {string | undefined}
*/
  readonly shard: string | undefined;
/**
* Returns the unique tag of the `DID`.
* @returns {string}
*/
  readonly tag: string;
}
/**
*/
export class Doc {
  free(): void;
/**
* @param {PubKey} authentication
*/
  constructor(authentication: PubKey);
/**
* Generates a keypair and DID Document, supported key_type is "Ed25519VerificationKey2018"
* @param {string} key_type
* @param {string | undefined} network
* @param {string | undefined} tag
* @returns {NewDoc}
*/
  static generateRandom(key_type: string, network?: string, tag?: string): NewDoc;
/**
* Generates an Ed25519 keypair and DID Document
* @param {string | undefined} network
* @param {string | undefined} tag
* @returns {NewDoc}
*/
  static generateEd25519(network?: string, tag?: string): NewDoc;
/**
* @param {Key} key
* @returns {any}
*/
  sign(key: Key): any;
/**
* Verify the signature with the authentication_key
* @returns {boolean}
*/
  verify(): boolean;
/**
* Generate the difference between two DID Documents and sign it
* @param {Doc} other
* @param {Key} key
* @returns {any}
*/
  diff(other: Doc, key: Key): any;
/**
* Verify the signature in a diff with the authentication_key
* @param {string} diff
* @returns {boolean}
*/
  verifyDiff(diff: string): boolean;
/**
* @param {DID} did
* @param {string} url
* @param {string} service_type
*/
  updateService(did: DID, url: string, service_type: string): void;
/**
*/
  clearServices(): void;
/**
* @param {PubKey} public_key
*/
  updatePublicKey(public_key: PubKey): void;
/**
*/
  clearPublicKeys(): void;
/**
* @param {PubKey} public_key
*/
  updateAuth(public_key: PubKey): void;
/**
*/
  clearAuth(): void;
/**
* @param {PubKey} public_key
*/
  updateAssert(public_key: PubKey): void;
/**
*/
  clearAssert(): void;
/**
* @param {PubKey} public_key
*/
  updateVerification(public_key: PubKey): void;
/**
*/
  clearVerification(): void;
/**
* @param {PubKey} public_key
*/
  updateDelegation(public_key: PubKey): void;
/**
*/
  clearDelegation(): void;
/**
* @param {PubKey} public_key
*/
  updateInvocation(public_key: PubKey): void;
/**
*/
  clearInvocation(): void;
/**
* @param {PubKey} public_key
*/
  updateAgreement(public_key: PubKey): void;
/**
*/
  clearAgreement(): void;
/**
*/
  updateTime(): void;
/**
* @param {any} ident
* @param {string | undefined} scope
* @returns {PubKey}
*/
  resolveKey(ident: any, scope?: string): PubKey;
/**
* Serializes a `Doc` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `Doc` object from a JSON object.
* @param {any} json
* @returns {Doc}
*/
  static fromJSON(json: any): Doc;
/**
* @returns {string}
*/
  readonly authChain: string;
/**
* @returns {DID}
*/
  readonly did: DID;
/**
* @returns {string}
*/
  readonly diffChain: string;
/**
* @returns {string}
*/
  readonly id: string;
/**
* @returns {any}
*/
  readonly proof: any;
}
/**
*/
export class Key {
  free(): void;
/**
* Generates a new `Key` object.
* @param {string} key_type
*/
  constructor(key_type: string);
/**
* Generates a new `Key` object suitable for ed25519 signatures.
* @returns {Key}
*/
  static generateEd25519(): Key;
/**
* Parses a `Key` object from base58-encoded public/private keys.
* @param {string} public_key
* @param {string} private_key
* @returns {Key}
*/
  static fromBase58(public_key: string, private_key: string): Key;
/**
* Parses a `Key` object from base64-encoded public/private keys.
* @param {string} public_key
* @param {string} private_key
* @returns {Key}
*/
  static fromBase64(public_key: string, private_key: string): Key;
/**
* Serializes a `Key` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `Key` object from a JSON object.
* @param {any} json
* @returns {Key}
*/
  static fromJSON(json: any): Key;
/**
* Returns the private key as a base58-encoded string.
* @returns {string}
*/
  readonly private: string;
/**
* Returns the public key as a base58-encoded string.
* @returns {string}
*/
  readonly public: string;
}
/**
*/
export class NewDoc {
  free(): void;
/**
* @returns {Doc}
*/
  readonly doc: Doc;
/**
* @returns {Key}
*/
  readonly key: Key;
}
/**
*/
export class PubKey {
  free(): void;
/**
* @param {DID} did
* @param {string} key_type
* @param {string} key_data
* @param {string | undefined} tag
*/
  constructor(did: DID, key_type: string, key_data: string, tag?: string);
/**
* Generates a new `PubKey` object suitable for ed25519 signatures.
* @param {DID} did
* @param {string} key_data
* @param {string | undefined} tag
* @returns {PubKey}
*/
  static generateEd25519(did: DID, key_data: string, tag?: string): PubKey;
/**
* Serializes a `PubKey` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `PubKey` object from a JSON object.
* @param {any} json
* @returns {PubKey}
*/
  static fromJSON(json: any): PubKey;
/**
* Returns the `controller` DID of the `PubKey` object.
* @returns {DID}
*/
  readonly controller: DID;
/**
* Returns the `id` DID of the `PubKey` object.
* @returns {DID}
*/
  readonly id: DID;
}
/**
*/
export class VerifiableCredential {
  free(): void;
/**
* @param {Doc} issuer_doc
* @param {Key} issuer_key
* @param {any} subject_data
* @param {string | undefined} credential_type
* @param {string | undefined} credential_id
*/
  constructor(issuer_doc: Doc, issuer_key: Key, subject_data: any, credential_type?: string, credential_id?: string);
/**
* Signs the credential with the given issuer `Doc` and `Key` object.
* @param {Doc} issuer
* @param {Key} key
*/
  sign(issuer: Doc, key: Key): void;
/**
* Verifies the credential signature against the issuer `Doc`.
* @param {Doc} issuer
* @returns {boolean}
*/
  verify(issuer: Doc): boolean;
/**
* Serializes a `VerifiableCredential` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `VerifiableCredential` object from a JSON object.
* @param {any} json
* @returns {VerifiableCredential}
*/
  static fromJSON(json: any): VerifiableCredential;
}
/**
*/
export class VerifiablePresentation {
  free(): void;
/**
* @param {Doc} holder_doc
* @param {Key} holder_key
* @param {any} credential_data
* @param {string | undefined} presentation_type
* @param {string | undefined} presentation_id
*/
  constructor(holder_doc: Doc, holder_key: Key, credential_data: any, presentation_type?: string, presentation_id?: string);
/**
* Signs the credential with the given holder `Doc` and `Key` object.
* @param {Doc} holder
* @param {Key} key
*/
  sign(holder: Doc, key: Key): void;
/**
* Verifies the credential signature against the holder `Doc`.
* @param {Doc} holder
* @returns {boolean}
*/
  verify(holder: Doc): boolean;
/**
* Serializes a `VerifiablePresentation` object as a JSON object.
* @returns {any}
*/
  toJSON(): any;
/**
* Deserializes a `VerifiablePresentation` object from a JSON object.
* @param {any} json
* @returns {VerifiablePresentation}
*/
  static fromJSON(json: any): VerifiablePresentation;
}

export type InitInput = RequestInfo | URL | Response | BufferSource | WebAssembly.Module;

export interface InitOutput {
  readonly memory: WebAssembly.Memory;
  readonly __wbg_verifiablepresentation_free: (a: number) => void;
  readonly verifiablepresentation_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
  readonly verifiablepresentation_sign: (a: number, b: number, c: number) => void;
  readonly verifiablepresentation_verify: (a: number, b: number) => number;
  readonly verifiablepresentation_toJSON: (a: number) => number;
  readonly verifiablepresentation_fromJSON: (a: number) => number;
  readonly __wbg_newdoc_free: (a: number) => void;
  readonly newdoc_key: (a: number) => number;
  readonly newdoc_doc: (a: number) => number;
  readonly __wbg_doc_free: (a: number) => void;
  readonly doc_new: (a: number) => number;
  readonly doc_generateRandom: (a: number, b: number, c: number, d: number, e: number, f: number) => number;
  readonly doc_generateEd25519: (a: number, b: number, c: number, d: number) => number;
  readonly doc_did: (a: number) => number;
  readonly doc_id: (a: number, b: number) => void;
  readonly doc_authChain: (a: number, b: number) => void;
  readonly doc_diffChain: (a: number, b: number) => void;
  readonly doc_proof: (a: number) => number;
  readonly doc_sign: (a: number, b: number) => number;
  readonly doc_verify: (a: number) => number;
  readonly doc_diff: (a: number, b: number, c: number) => number;
  readonly doc_verifyDiff: (a: number, b: number, c: number) => number;
  readonly doc_updateService: (a: number, b: number, c: number, d: number, e: number, f: number) => void;
  readonly doc_clearServices: (a: number) => void;
  readonly doc_updatePublicKey: (a: number, b: number) => void;
  readonly doc_clearPublicKeys: (a: number) => void;
  readonly doc_updateAuth: (a: number, b: number) => void;
  readonly doc_clearAuth: (a: number) => void;
  readonly doc_updateAssert: (a: number, b: number) => void;
  readonly doc_clearAssert: (a: number) => void;
  readonly doc_updateVerification: (a: number, b: number) => void;
  readonly doc_clearVerification: (a: number) => void;
  readonly doc_updateDelegation: (a: number, b: number) => void;
  readonly doc_clearDelegation: (a: number) => void;
  readonly doc_updateInvocation: (a: number, b: number) => void;
  readonly doc_clearInvocation: (a: number) => void;
  readonly doc_updateAgreement: (a: number, b: number) => void;
  readonly doc_clearAgreement: (a: number) => void;
  readonly doc_updateTime: (a: number) => void;
  readonly doc_resolveKey: (a: number, b: number, c: number, d: number) => number;
  readonly doc_toJSON: (a: number) => number;
  readonly doc_fromJSON: (a: number) => number;
  readonly __wbg_verifiablecredential_free: (a: number) => void;
  readonly verifiablecredential_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
  readonly verifiablecredential_sign: (a: number, b: number, c: number) => void;
  readonly verifiablecredential_verify: (a: number, b: number) => number;
  readonly verifiablecredential_toJSON: (a: number) => number;
  readonly verifiablecredential_fromJSON: (a: number) => number;
  readonly publish: (a: number, b: number) => number;
  readonly resolve: (a: number, b: number, c: number) => number;
  readonly checkCredential: (a: number, b: number, c: number) => number;
  readonly checkPresentation: (a: number, b: number, c: number) => number;
  readonly __wbg_pubkey_free: (a: number) => void;
  readonly pubkey_new: (a: number, b: number, c: number, d: number, e: number, f: number, g: number) => number;
  readonly pubkey_generateEd25519: (a: number, b: number, c: number, d: number, e: number) => number;
  readonly pubkey_id: (a: number) => number;
  readonly pubkey_controller: (a: number) => number;
  readonly pubkey_toJSON: (a: number) => number;
  readonly pubkey_fromJSON: (a: number) => number;
  readonly __wbg_did_free: (a: number) => void;
  readonly did_new: (a: number, b: number, c: number) => number;
  readonly did_fromBase58Key: (a: number, b: number, c: number, d: number) => number;
  readonly did_fromBase64Key: (a: number, b: number, c: number, d: number) => number;
  readonly did_parse: (a: number, b: number) => number;
  readonly did_network: (a: number, b: number) => void;
  readonly did_shard: (a: number, b: number) => void;
  readonly did_tag: (a: number, b: number) => void;
  readonly did_address: (a: number, b: number) => void;
  readonly did_toString: (a: number, b: number) => void;
  readonly start: () => void;
  readonly initialize: () => number;
  readonly __wbg_key_free: (a: number) => void;
  readonly key_new: (a: number, b: number) => number;
  readonly key_generateEd25519: () => number;
  readonly key_fromBase58: (a: number, b: number, c: number, d: number) => number;
  readonly key_fromBase64: (a: number, b: number, c: number, d: number) => number;
  readonly key_public: (a: number, b: number) => void;
  readonly key_private: (a: number, b: number) => void;
  readonly key_toJSON: (a: number) => number;
  readonly key_fromJSON: (a: number) => number;
  readonly __wbindgen_malloc: (a: number) => number;
  readonly __wbindgen_realloc: (a: number, b: number, c: number) => number;
  readonly __wbindgen_export_2: WebAssembly.Table;
  readonly _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h3ac5b583b0bf3a8f: (a: number, b: number, c: number) => void;
  readonly __wbindgen_free: (a: number, b: number) => void;
  readonly __wbindgen_exn_store: (a: number) => void;
  readonly wasm_bindgen__convert__closures__invoke2_mut__h58f39d7e933aee21: (a: number, b: number, c: number, d: number) => void;
  readonly __wbindgen_start: () => void;
}

/**
* Loads the Wasm file so the lib can be used, relative path to Wasm file
* @param {string | undefined} path
*/
export function init (path?: string): Promise<void>;
        